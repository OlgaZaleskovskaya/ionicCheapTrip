{"version":3,"sources":["webpack:///src/app/places/discover/discover.page.html","webpack:///src/app/places/discover/discover-routing.module.ts","webpack:///src/app/places/discover/discover.module.ts","webpack:///src/app/places/discover/discover.page.scss","webpack:///src/app/places/discover/discover.page.ts"],"names":["routes","path","component","loadChildren","then","m","OfferPageModule","DiscoverPageRoutingModule","imports","forChild","exports","DiscoverPageModule","declarations","DiscoverPage","placesSrv","startPointCitiesAvailable","endPointCitiesAvailable","startPointCities","endPointCities","ignoreNextStartPointChange","ignoreNextEndPointChange","startPointCity","id","name","endPointCity","getAllCities","cleanDataSubscription","cleanPathsSubj$","subscribe","_res","onClearAll","unsubscribe","input","event","substring","target","value","getStartPointAutocomplete","cities","length","getEndPointAutocomplete","city","getPaths","console","log","onClearStartPoint","onClearEndPoint","selector","template"],"mappings":"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","file":"discover-discover-module-es5.js","sourcesContent":["export default \"<ion-toolbar color=\\\"primary\\\">\\n  <ion-buttons slot=\\\"start\\\">\\n   <!--  <ion-menu-button menu=\\\"m1\\\"></ion-menu-button> -->\\n  </ion-buttons>\\n  <ion-title> Choose your way</ion-title>\\n</ion-toolbar>\\n<ion-content>\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title color=\\\"primary\\\">\\n        Discover the cheapest way\\n      </ion-card-title>\\n      <ion-card-subtitle class=\\\"text-center\\\">to get anywhere combining\\n        plane,\\n        train, bus and rideshare</ion-card-subtitle>\\n\\n    </ion-card-header>\\n    <ion-img></ion-img>\\n    <ion-card-content>\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size-xs=\\\"12\\\" size-sm=\\\"6\\\" offset-sm=\\\"3\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Start Point</ion-label>\\n              <ion-input (ionChange)=\\\"onStartPointSearchChange($event)\\\" [(ngModel)]=\\\"startPointCity.name\\\"></ion-input>\\n              <ion-note slot=\\\"end\\\" color=\\\"danger\\\" (click)=\\\"onClearStartPoint()\\\" role=\\\"button\\\">clear</ion-note>\\n            </ion-item>\\n            <ion-item *ngIf=\\\"startPointCitiesAvailable\\\">\\n              <ion-list style=\\\"width: 100%; max-height: 200px; overflow-y: scroll;\\\">\\n                <ion-item *ngFor=\\\"let result of startPointCities\\\" (click)=\\\"startPointCitySelected(result)\\\" button>\\n                  <ion-label>{{result.name}}</ion-label>\\n                </ion-item>\\n              </ion-list>\\n            </ion-item>\\n          </ion-col>\\n          <!--  <ion-col size-xs=\\\"2\\\"  size-sm=\\\"1\\\" offset-sm=\\\"3\\\">\\n            <ion-item lines=\\\"none\\\">\\n              <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\n            </ion-item>\\n          </ion-col> -->\\n        </ion-row>\\n        <ion-row>\\n          <ion-col size-sm=\\\"6\\\" offset-sm=\\\"3\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">End Point</ion-label>\\n              <ion-input (ionChange)=\\\"onEndPointSearchChange($event)\\\" [(ngModel)]=\\\"endPointCity.name\\\"></ion-input>\\n              <ion-note slot=\\\"end\\\" color=\\\"danger\\\" (click)=\\\"onClearEndPoint()\\\" role=\\\"button\\\">clear</ion-note>\\n            </ion-item>\\n\\n            <ion-item *ngIf=\\\"endPointCitiesAvailable\\\">\\n              <ion-list style=\\\"width: 100%; max-height: 200px; overflow-y: scroll;\\\">\\n                <ion-item *ngFor=\\\"let result of endPointCities\\\" (click)=\\\"endPointCitySelected(result)\\\" button>\\n                  <ion-label>{{result.name}}</ion-label>\\n                </ion-item>\\n              </ion-list>\\n            </ion-item>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card-content>\\n    <ion-toolbar>\\n      <ion-buttons slot=\\\"primary\\\">\\n\\n        <ion-button size=\\\"small\\\" fill=\\\"solid\\\" type=\\\"button\\\" (click)=\\\"onClearAll()\\\" color=\\\"secondary\\\">Clear </ion-button>\\n        <ion-button size=\\\"small\\\" fill=\\\"solid\\\" type=\\\"button\\\" color=\\\"primary\\\" routerDirection=\\\"forward\\\"\\n          routerLink=\\\"/places/tabs/discover/offer\\\" (click)=\\\"searchPath()\\\">Let's go</ion-button>\\n      </ion-buttons>\\n    </ion-toolbar>\\n  </ion-card>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DiscoverPage } from './discover.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiscoverPage\n  },\n  {\n    path: 'offer',\n    loadChildren: () => import('./offer/offer.module').then( m => m.OfferPageModule)\n  },\n /*  {\n    path: 'details',\n    loadChildren: () => import('./details/details.module').then( m => m.DetailsPageModule)\n  } */\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DiscoverPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DiscoverPageRoutingModule } from './discover-routing.module';\n\nimport { DiscoverPage } from './discover.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DiscoverPageRoutingModule,\n    SharedModule\n  ],\n  declarations: [DiscoverPage]\n})\nexport class DiscoverPageModule {}\n","export default \"span {\\n  transform: rotate(90deg);\\n  color: var(--ion-color-primary);\\n}\\n\\nh3 {\\n  text-align: center;\\n  color: var --ion-color-secondary;\\n}\\n\\nion-card-title, ion-card-subtitle {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGxhY2VzL2Rpc2NvdmVyL2Rpc2NvdmVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHdCQUFBO0VBQ0EsK0JBQUE7QUFDSjs7QUFFRTtFQUNFLGtCQUFBO0VBQ0osZ0NBQUE7QUFDQTs7QUFFQTtFQUNFLGtCQUFBO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC9wbGFjZXMvZGlzY292ZXIvZGlzY292ZXIucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsic3BhbntcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItcHJpbWFyeSk7XHJcbn1cclxuXHJcbiAgaDN7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbmNvbG9yOiB2YXIgKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XHJcbn1cclxuXHJcbmlvbi1jYXJkLXRpdGxlLCBpb24tY2FyZC1zdWJ0aXRsZXtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuIl19 */\";","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport { ICity } from \"../places.model\";\n\nimport { PlacesService } from \"../places.service\";\n\n@Component({\n  selector: \"app-discover\",\n  templateUrl: \"./discover.page.html\",\n  styleUrls: [\"./discover.page.scss\"],\n})\nexport class DiscoverPage implements OnInit, OnDestroy {\n\n  startPointCitiesAvailable: boolean = false;\n  endPointCitiesAvailable: boolean = false;\n  startPointCities: ICity[] = [];\n  endPointCities: ICity[] = [];\n  cleanDataSubscription: Subscription;\n\n  ignoreNextStartPointChange: boolean = false;\n  ignoreNextEndPointChange: boolean = false;\n  startPointCity: ICity = { id: -1, name: \"\" };\n  endPointCity: ICity = { id: -1, name: \"\" };\n\n\n  constructor(private placesSrv: PlacesService) {}\n\n  ngOnInit() {\n    this.placesSrv.getAllCities();\n\n    this.cleanDataSubscription = this.placesSrv.cleanPathsSubj$.subscribe(\n      (_res) => {\n        this.onClearAll();\n      }\n    );\n  }\n  ngOnDestroy(): void {\n    this.cleanDataSubscription.unsubscribe();\n  }\n\n  onSubmit() {}\n\n  onCleanInput(input: string) {}\n\n  onChangeFrom() {}\n\n  onStartPointSearchChange(event: any) {\n    const substring = event.target.value;\n    if (this.ignoreNextStartPointChange) {\n      this.ignoreNextStartPointChange = false;\n      this.startPointCitiesAvailable = false;\n      return;\n    }\n    this.placesSrv.getStartPointAutocomplete(substring).subscribe((cities) => {\n      this.startPointCities = cities;\n      if (cities.length > 0) {\n        this.startPointCitiesAvailable = true;\n      } else {\n        this.startPointCitiesAvailable = false;\n      }\n    });\n  }\n\n  onEndPointSearchChange(event: any) {\n    const substring = event.target.value;\n    if (this.ignoreNextEndPointChange) {\n      this.ignoreNextEndPointChange = false;\n      this.endPointCitiesAvailable = false;\n      return;\n    }\n    this.placesSrv.getEndPointAutocomplete(substring).subscribe((cities) => {\n      this.endPointCities = cities;\n\n      if (cities.length > 0) {\n        this.endPointCitiesAvailable = true;\n      } else {\n        this.endPointCitiesAvailable = false;\n      }\n    });\n  }\n\n  startPointCitySelected(city: any): void {\n    this.startPointCity = city;\n    this.ignoreNextStartPointChange = true;\n  }\n\n  endPointCitySelected(city: any): void {\n    this.endPointCity = city;\n    this.ignoreNextEndPointChange = true;\n  }\n\n  searchPath() {\n    this.placesSrv.getPaths(this.startPointCity, this.endPointCity);\n  }\n\n  onClearStartPoint() {\n    this.startPointCity = { id: -1, name: \"\" };\n    this.ignoreNextStartPointChange = true;\n    this.startPointCitiesAvailable = false;\n    this.startPointCities = [];\n  }\n\n  onClearEndPoint() {\n    this.endPointCity = { id: -1, name: \"\" };\n    this.ignoreNextEndPointChange = true;\n    this.endPointCitiesAvailable = false;\n    this.endPointCities = [];\n  }\n\n  onClearAll() {\n    console.log(\"on clear all\");\n    this.onClearStartPoint();\n    this.onClearEndPoint();\n  }\n}\n"]}